scopeName: "source.cs"
name: "C#"
fileTypes: [
  "cs"
]
foldingStartMarker: "^\\s*#\\s*region|^\\s*/\\*|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))"
foldingStopMarker: "^\\s*#\\s*endregion|^\\s*\\*/|^\\s*\\}"
patterns: [
  {
    include: "#attribute"
  }
  {
    include: "#using"
  }
  {
    include: "#namespace"
  }
  {
    include: "#code"
  }
  {
    include: "#method"
  }
]
repository:
  using:
    begin: "\\s*\\b(using)\\b"
    beginCaptures:
      "1":
        name: "keyword.other.using.cs"
    end: "\\s*(?:$|;)"
    patterns: [
      {
        include: "#comments"
      }
      {
        match: "\\s*\\b(static)\\b"
        captures:
          1:
            name: "keyword.other.static.cs"
      }
      {
        begin: "(\\w+)(?=.*\\=)"
        beginCaptures:
          "1":
            name: "entity.name.alias.namespace.cs"
        patterns: [
          {
            include: "#comments"
          }
          {
            begin: "\\s*\\=(?=[\\w\\s/])"
            patterns: [
              {
                include: "#comments"
              }
              {
                match: "[\\w.]+"
                name: "entity.name.type.namespace.cs"
              }
            ]
            end: "(?=;)"
          }
        ]
        end: ";"
      }
      {
        match: "[\\w.]+"
        name: "entity.name.type.namespace.cs"
      }
    ]
  namespace:
    begin: "\\s*[^@]?((namespace)\\s+([\\w.]+))"
    beginCaptures:
      "1":
        name: "meta.namespace.identifier.cs"
      "2":
        name: "keyword.other.namespace.cs"
      "3":
        name: "entity.name.type.namespace.cs"
    end: "}"
    endCaptures:
      "0":
        name: "punctuation.section.namespace.end.cs"
    patterns: [
      {
        begin: "{"
        beginCaptures:
          "0":
            name: "punctuation.section.namespace.begin.cs"
        end: "(?=})"
        patterns: [
          {
            include: "#using"
          }
          {
            include: "#namespace"
          }
          {
            include: "#code"
          }
        ]
      }
    ]
  "field-declaration":
    patterns: [
      {
        begin: "(?=(?:(?:(?:private|public|volatile|internal|protected|static|readonly|const|event|extern)\\s*)*)(?:[\\w\\s?*,<>\\[\\]]+?)(?:[\\w]+)\\s*(?:;|=|=>))"
        end: "(?=;)"
        name: "meta.field.declaration.cs"
        patterns: [
          {
            begin: "(?==>?)"
            end: "(?=;|$)"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
          {
            begin: "\\s*=\\s*"
            end: "(?=;)"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
          {
            match: "\\s*((?:(?:private|public|volatile|internal|protected|static|readonly|const|event|extern)\\s*)*)\\s*(.+?)\\s*([\\w]+)\\s*(?=;|=)"
            captures:
              "1":
                name: "storage.modifier.cs"
              "2":
                patterns: [
                  {
                    include: "#type"
                  }
                ]
              "3":
                name: "entity.name.variable.cs"
          }
        ]
      }
    ]
  variable:
    patterns: [
      {
        match: "\\s*\\b(var)\\s+(.*?)(?=(=|;))"
        captures:
          "1":
            name: "keyword.other.var.cs"
          "2":
            name: "entity.name.variables.cs"
      }
      {
        match: "\\s*\\b(?!var|return|yield|throw)([\\w+<>*?,\\[\\]]+)\\s+([\\w]+)\\s*(?=(=(?!=)|;))"
        captures:
          "1":
            patterns: [
              {
                include: '#type'
              }
            ]
          "2":
            name: "entity.name.variables.cs"
      }
    ]
  block:
    patterns: [
      {
        begin: "{"
        beginCaptures:
          "0":
            name: "punctuation.section.block.begin.cs"
        end: "}"
        endCaptures:
          "0":
            name: "punctuation.section.block.end.cs"
        name: "meta.block.cs"
        patterns: [
          {
            include: "#code"
          }
        ]
      }
    ]
  returnType:
    patterns: [
      {
        match: "void"
        name: "storage.type.cs"
      }
      {
        include: "#type"
      }
    ]
  type:
    patterns: [
      {
        include: "#builtinTypes"
      }
      {
        include: "#typeName"
      }
    ]
  builtinTypes:
    patterns: [
      {
        match: "\\b(bool|byte|sbyte|char|decimal|double|enum|float|int|uint|long|ulong|short|ushort)[ ]*(\\?|\\*)?\\b"
        name: "storage.value.type.cs"
        captures:
          "2":
            name: "punctuation.storage.type.modifier.cs"
      }
      {
        match: "\\b(dynamic|object|string)[ ]*([*])?\\b"
        name: "storage.reference.type.cs"
        captures:
          "2":
            name: "punctuation.storage.type.modifier.cs"
      }
    ]
  typeName:
    patterns: [
      {
        begin: "\\b([a-zA-Z]+[\\w\\.]*)\\s*<"
        end: ">"
        captures:
          "1":
            name: "entity.name.generic.class.cs"
        patterns: [
          {
            match: ","
          }
          {
            match: "(\\w+([?*])?)"
            captures:
              "1":
                name: "meta.generic.type.specifier.cs"
                patterns: [
                  {
                    include: "#type"
                  }
                ]
          }
        ]
      }
      {
        match: "\\b(I[A-Z]+[\\w\\.]*)\\s*(?:\\s*\\[\\s*\\])?\\*?\\b"
        captures:
          "1":
            name: "entity.name.interface.class.cs"
      }
      {
        match: "\\b([a-zA-Z]+[\\w\\.]*)\\s*(?:\\s*\\[\\s*\\])?\\*?\\b"
        captures:
          "1":
            name: "entity.name.class.cs"
      }
    ]
  "generic-constraints":
    name: "meta.generic.constraints.cs"
    begin: "(where)\\s+(\\w+([?*])?)\\s*:"
    end: "(?=where|{|$)"
    beginCaptures:
      "1":
        name: "keyword.other.cs"
      "2":
        name: "meta.generic.type.specifier.cs"
        patterns: [
          {
            include: "#type"
          }
        ]
    patterns: [
      {
        match: "\\b(class|struct)\\b"
        name: "keyword.other.cs"
      }
      {
        match: "(new)\\s*\\(\\s*\\)"
        captures:
          "1":
            name: "keyword.other.cs"
      }
      {
        include: "#type"
      }
      {
        include: "#generic-constraints"
      }
      {
        include: "#comments"
      }
    ]
  "enum-declaration":
    begin: "(?=(?:public|private|protected|internal)?(.*)?(?:enum)\\s+\\w+)"
    end: "}"
    endCaptures:
      "0":
        name: "punctuation.section.enum.end.cs"
    patterns: [
      {
        match: "\\b(public|private|protected|internal|static)\\b"
        name: "storage.modifier.cs"
      }
      {
        include: "#comments"
      }
      {
        begin: "(enum)\\s+"
        end: "(?={)"
        name: "meta.enum.declaration.cs"
        beginCaptures:
          "1":
            name: "keyword.enum.cs"
        patterns: [
          {
            match: "\\b([a-zA-Z]+\\w*)\\b"
            captures:
              "1":
                name: "meta.class.enum.identifier.cs"
          }
        ]
      }
      {
        begin: "{"
        beginCaptures:
          "0":
            name: "punctuation.section.enum.begin.cs"
        end: "(?=})"
        patterns: [
          {
            include: "#comments"
          }
          {
            match: ","
          }
          {
            include: "#attribute"
          }
          {
            begin: "\\b([a-zA-Z]+\\w*)\\b\\s*"
            beginCaptures:
              "1":
                name: "entity.name.enum.cs"
            end: "(?=,|})"
            patterns: [
              {
                include: "#comments"
              }
              {
                begin: "\\s*=\\s*"
                end: "(?=,|})"
                patterns: [
                  {
                    include: "#comments"
                  }
                  {
                    include: "#constants"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  "type-declaration":
    begin: "(?=(?:public|private|protected|internal|static|partial|abstract|sealed|new)?(.*)?(?:class|struct|interface)\\s+\\w+)"
    end: "}"
    endCaptures:
      "0":
        name: "punctuation.section.class.end.cs"
    patterns: [
      {
        match: "\\b(public|private|protected|internal|static|partial|abstract|sealed|new)\\b"
        name: "storage.modifier.cs"
      }
      {
        include: "#comments"
      }
      {
        begin: "(class|struct|interface)\\s+"
        end: "(?={|:|$|where)"
        name: "meta.type.declaration.cs"
        beginCaptures:
          "1":
            name: "keyword.class.cs"
        patterns: [
          {
            include: "#typeName"
          }
        ]
      }
      {
        begin: ":"
        end: "(?={|where)"
        patterns: [
          {
            include: "#typeName"
          }
          {
            match: "([\\w<>]+)\\s*"
            captures:
              "1":
                name: "storage.type.cs"
          }
          {
            include: "#comments"
          }
        ]
      }
      {
        include: "#generic-constraints"
      }
      {
        begin: "{"
        beginCaptures:
          "0":
            name: "punctuation.section.class.begin.cs"
        end: "(?=})"
        patterns: [
          {
            include: "#type-body"
          }
        ]
      }
    ]
  "type-body":
    patterns: [
      {
        include: "#attribute"
      }
      {
        include: "#enum-declaration"
      }
      {
        include: "#type-declaration"
      }
      {
        include: "#field-declaration"
      }
      {
        include: "#property-declaration"
      }
      {
        include: "#method"
      }
      {
        include: "#code"
      }
    ]
  typeOperator:
    patterns: [
      {
        include: "#keywordTypeOperator"
      }
      {
        include: "#castTypeOperator"
      }
      {
        include: "#functionTypeOperator"
      }
    ]
  castTypeOperator:
    match: "\\((\\w+[?*,<>\\[\\]]*)\\)"
    captures:
      "1":
        patterns: [
          {
            include: "#type"
          }
        ]
  functionTypeOperator:
    match: "\\b(typeof|sizeof)\\s*\\((\\w+[?*,<>\\[\\]]*)\\)"
    captures:
      "1":
        name: "keyword.operator.cs"
      "2":
        patterns: [
          {
            include: "#type"
          }
        ]
  keywordTypeOperator:
    match: "\\b(is|as|new)\\s+(\\w+[?*,<>\\[\\]]*)"
    captures:
      "1":
        name: "keyword.operator.cs"
      "2":
        patterns: [
          {
            include: "#type"
          }
        ]
  code:
    patterns: [
      {
        include: "#typeOperator"
      }
      {
        include: "#block"
      }
      {
        include: "#comments"
      }
      {
        include: "#enum-declaration"
      }
      {
        include: "#type-declaration"
      }
      {
        include: "#constants"
      }
      {
        include: "#keywords"
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#method-call"
      }
      {
        include: "#variable"
      }
      {
        include: "#builtinTypes"
      }
    ]
  comments:
    patterns: [
      {
        begin: "///"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.cs"
        end: "$"
        name: "comment.block.documentation.cs"
        patterns: [
          {
            include: "text.xml"
          }
        ]
      }
      {
        begin: "/\\*"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.cs"
        end: "\\*/"
        endCaptures:
          "0":
            name: "punctuation.definition.comment.cs"
        name: "comment.block.cs"
      }
      {
        begin: "//"
        beginCaptures:
          "1":
            name: "punctuation.definition.comment.cs"
        end: "$"
        name: "comment.line.double-slash.cs"
      }
    ]
  "string-interpolated":
    patterns: [
      {
        begin: "\\$\""
        end: "\"|$"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.cs"
        patterns: [
          {
            begin: "([^{}]+?)(?={|\"|$)"
            end: "(?={|\"|$)"
            beginCaptures:
              "1":
                name: "string.quoted.double.cs"
          }
          {
            begin: "{"
            end: "}"
            name: "meta.interpolated.expression.cs"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
          {
            begin: "([^{}]+?)(?={|\"|$)"
            end: "(?={|\"|$)"
            beginCaptures:
              "1":
                name: "string.quoted.double.cs"
          }
        ]
      }
    ]
  "string-interpolated-verbatim":
    patterns: [
      {
        begin: "\\$@\""
        end: "\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.cs"
        patterns: [
          {
            begin: "([^{}]+?)(?={|\"|$)"
            end: "(?={|\"|$)"
            beginCaptures:
              "1":
                name: "string.quoted.double.literal.cs"
          }
          {
            begin: "{"
            end: "}"
            name: "meta.interpolated.expression.cs"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
          {
            begin: "([^{}]+?)(?={|\"|$)"
            end: "(?={|\"|$)"
            beginCaptures:
              "1":
                name: "string.quoted.double.literal.cs"
          }
        ]
      }
    ]
  string:
    patterns: [
      {
        include: "#string-interpolated-verbatim"
      }
      {
        include: "#string-interpolated"
      }
      {
        captures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        match: "@\"([^\"]|\"\")*\""
        name: "string.quoted.double.literal.cs"
      }
      {
        begin: "\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        end: "\""
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.cs"
        name: "string.quoted.double.cs"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.cs"
          }
        ]
      }
      {
        begin: "'"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        end: "'"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.cs"
        name: "string.quoted.single.cs"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.cs"
          }
        ]
      }
    ]
  constants:
    patterns: [
      {
        match: "\\b(true|false|null|this|base)\\b"
        name: "constant.language.cs"
      }
      {
        match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(?i:f|d|m|u|l|ul|lu)?\\b"
        name: "constant.numeric.cs"
      }
      {
        include: "#string"
      }
    ]
  keywords:
    patterns: [
      {
        match: "\\b(if|else|while|for|foreach|in|do|return|continue|break|switch|case|default|goto|throw|try|catch|finally|lock|yield|await|when)\\b"
        name: "keyword.control.cs"
      }
      {
        match: "\\b(from|where|select|group|into|orderby|join|let|on|equals|by|ascending|descending)\\b"
        name: "keyword.linq.cs"
      }
      {
        match: "\\b(using|checked|unchecked|override|readonly|stackalloc|nameof)\\b"
        name: "keyword.operator.cs"
      }
      {
        match: "\\b(event|delegate|fixed|add|remove|set|get|value|alias|global|extern)\\b"
        name: "keyword.other.cs"
      }
    ]
  attribute:
    begin: "\\["
    end: "\\]"
    name: "meta.annotation.cs"
    patterns: [
      {
        include: "#constants"
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#builtinTypes"
      }
      {
        include: "#comments"
      }
    ]
  "property-declaration":
    begin: "\\s*(?!.*\\b(?:class|interface|struct)\\b)((?:\\w+\\s+)*?)(?!(?:private|public|internal|protected|static|new|virtual|override))(\\w.+?)\\s+(\\w+)\\s*(?={|$)"
    end: "}|;|$"
    beginCaptures:
      "1":
        match: "\\b(private|public|internal|protected|static|new|virtual|override)\\b"
        name: "storage.modifier.cs"
      "2":
        patterns: [
          {
            include: "#type"
          }
        ]
      "3":
        name: "entity.name.function.cs"
    name: "meta.property.cs"
    patterns: [
      {
        include: "#block"
      }
      {
        begin: "="
        end: "(?=;)"
        patterns: [
          {
            include: "#code"
          }
        ]
      }
    ]
  method:
    patterns: [
      {
        begin: "(?=\\bnew\\s+)(?=[\\w<].*\\s+)(?=[^=]+\\()"
        end: "(?={|;)"
        name: "meta.new-object.cs"
        patterns: [
          {
            include: "#code"
          }
        ]
      }
      {
        match: "\\b(internal|public|protected|private|static|new|abstract|virtual|override|implicit|explicit|operator|async|partial)\\b"
        name: "storage.modifier.cs"
      }
      {
        begin: "(void|[\\w<>.?*\\[\\],]+)\\s*(?=.*)"
        beginCaptures:
          "1":
            name: "meta.method.return-type.cs"
            patterns: [
              {
                include: "#returnType"
              }
            ]
        end: "[};]"
        endCaptures:
          "1":
            name: "punctuation.section.method.end.cs"
        name: "meta.method.cs"
        patterns: [
          {
            begin: "([\\w]+)\\s*(<[\\w<>\\s,`?]*>)?\\s*(\\()"
            beginCaptures:
              "1":
                name: "entity.name.function.declaration.cs"
              "2":
                name: "meta.generic.method.identifier"
                patterns: [
                  {
                    match: ","
                  }
                  {
                    match: "(\\w+)"
                    captures:
                      "1":
                        name: "meta.generic.type.specifier.cs"
                        patterns: [
                          {
                            include: "#type"
                          }
                        ]
                  }
                ]
              "3":
                name: "punctuation.definition.method-parameters.begin.cs"
            end: "\\)"
            endCaptures:
              "0":
                name: "punctuation.definition.method-parameters.end.cs"
            name: "meta.method.identifier.cs"
            patterns: [
              {
                include: "#attribute"
              }
              {
                include: "#parameters"
              }
              {
                include: "#constants"
              }
              {
                include: "#comments"
              }
            ]
          }
          {
            include: "#generic-constraints"
          }
          {
            begin: ":\\s*(this|base)\\s*\\("
            beginCaptures:
              "1":
                name: "constant.language.cs"
            end: "\\)"
            name: "meta.method.base-call.cs"
            patterns: [
              {
                include: "#builtinTypes"
              }
            ]
          }
          {
            include: "#comments"
          }
          {
            begin: "{"
            beginCaptures:
              "0":
                name: "punctuation.section.method.begin.cs"
            end: "(?=})"
            name: "meta.method.body.cs"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
          {
            begin: "=>"
            beginCaptures:
              "0":
                name: "punctuation.section.method.begin.cs"
            end: "(?=;)"
            name: "meta.method.body.cs"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
        ]
      }
    ]
  "method-call":
    begin: "([\\w$]+)\\s*(\\()"
    beginCaptures:
      "1":
        name: "entity.name.function.cs"
      "2":
        name: "punctuation.definition.method-parameters.begin.cs"
    end: "\\)"
    endCaptures:
      "0":
        name: "punctuation.definition.method-parameters.end.cs"
    name: "meta.method-call.cs"
    patterns: [
      {
        match: ","
        name: "punctuation.definition.separator.parameter.cs"
      }
      {
          match: "\\b(ref|out)\\b"
          name: "storage.modifier.cs"
      }
      {
        include: "#code"
      }
    ]
  parameters:
    name: "meta.parameters.cs"
    begin: "\\b(ref|params|out)?\\s*\\b(\\w+(?:\\s*<.*?>)?(?:\\s*\\*)*(?:\\s*\\?)?(?:\\s*\\[.*?\\])?)\\s+(@?\\w+)\\s*(=)?"
    beginCaptures:
      "1":
        name: "storage.modifier.cs"
      "2":
        patterns: [
          {
            include: "#type"
          }
        ]
      "3":
        name: "variable.parameter.function.cs"
      "4":
        name: "keyword.operator.assignment.cs"
    end: "(?:(,)|(?=[\\)]))"
    endCaptures:
      "1":
        name: "punctuation.definition.separator.parameter.cs"
    patterns: [
      {
        include: "#constants"
      }
      {
        include: "#block"
      }
      {
        include: "#builtinTypes"
      }
    ]
  preprocessor:
    patterns: [
      {
        captures:
          "1":
            name: "meta.directive.preprocessor.cs"
          "3":
            name: "entity.name.preprocessor.cs"
        match: "^\\s*(#\\s*(if|else|elif|endif|define|undef|warning|error|line|pragma|region|endregion))\\b\\s*(.*?)(?=$|\\/\\/)"
        name: "meta.preprocessor.cs"
      }
    ]
